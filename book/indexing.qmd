# Indexing (Or Lack Thereof) {#sec-indexing}

This chapter is about indexes, which are the source of much confusion in Pandas and simply don't exist in Polars.

## Fetch Data (No Dataframes Here)

First we fetch some flight delay data. This part isn't about dataframes so feel free to skip the code.

``` {python}
#| code-fold: true
from pathlib import Path
from zipfile import ZipFile
import requests

data_dir = Path("../data") # replace this with a directory of your choice
dest = data_dir / "flights.csv.zip"

if not dest.exists():
    r = requests.get(
        "https://transtats.bts.gov/PREZIP/On_Time_Reporting_Carrier_On_Time_Performance_1987_present_2022_1.zip",
        verify=False,
        stream=True,
    )

    data_dir.mkdir(exist_ok=True)
    with dest.open("wb") as f:
        for chunk in r.iter_content(chunk_size=102400):
            if chunk:
                f.write(chunk)

    with ZipFile(dest) as zf:
        zf.extract(zf.filelist[0].filename, path=data_dir)

extracted = data_dir / "On_Time_Reporting_Carrier_On_Time_Performance_(1987_present)_2022_1.csv"
```

## Read the data

:::{.callout-tip}
The examples in this book use the [lazy evaluation](https://pola-rs.github.io/polars/user-guide/migration/pandas/#be-lazy)
feature of Polars less than you should.
It's just inconvenient to use the lazy API when displaying dozens of intermediate results for educational purposes.
:::

::: {.panel-tabset}
## Polars

``` {python}
import polars as pl
pl.Config.set_tbl_rows(5) # don't print too many rows in the book
df_pl = pl.read_csv(extracted, truncate_ragged_lines=True)
df_pl
```

## Pandas

``` {python}
import pandas as pd
pd.options.display.max_rows = 5
df_pd = pd.read_csv(extracted)
df_pd
```

:::

## Indexing

Pandas uses a special index type that is quite powerful for selecting rows and
columns but is also very complicated. To quote *Modern Pandas*:

> The complexity of pandas' indexing is a microcosm for the complexity of the pandas API in general. There's a reason for the complexity (well, most of it), but that's not much consolation while you're learning. Still, all of these ways of indexing really are useful enough to justify their inclusion in the library.

It's true that Pandas indexing is quite useful,
but it's also true that everyone always forgets how do to anything non-trivial with it. The benefits of being able to put
`df.loc[pd.IndexSlice[:, 'B0':'B1'], :]]` in your code base are somewhat dubious.

Polars avoids this complexity by simply **not having an index.** 
It just has ordinary methods like `.select`, `.filter` and `.head` for accessing a subset of rows or columns.

## Slicing vs Selecting

In Pandas you can subset a dataframe with `.loc[]`, `.iloc[]` or just `[]`.
In Polars you select rows and columns with expressions as noted above.

You *can* also use square bracket indexing in Polars, but it 
doesn't work in lazy mode so is only to be used when convenience
is most important.

Here are some examples:

### Rows by number, columns by name


::: {.panel-tabset}
## Polars (recommended)

Using `head` and `tail`:

``` {python}
df_pl.select(["Dest", "Tail_Number"]).head(16).tail(4)
```

Or using `gather`:

``` {python}
df_pl.select(pl.col(["Dest", "Tail_Number"]).gather(list(range(12, 16))))
```

## Polars (square bracket)

``` {python}
df_pl[12:16, ["Dest", "Tail_Number"]]
```

## Pandas

``` {python}
df_pd.loc[12:15, ["Dest", "Tail_Number"]]
```

:::


### Rows by string index, columns by name

Since there's no such thing as an index in Polars,
so we just use `.filter`:

::: {.panel-tabset}
## Polars

``` {python}
(
    df_pl
    .filter(pl.col("IATA_CODE_Reporting_Airline").is_in(['AA', 'DL']))
    .select(["IATA_CODE_Reporting_Airline", "Dest", "Tail_Number"])
)
```

## Pandas

``` {python}
(
    df_pd
    .set_index("IATA_CODE_Reporting_Airline")
    .loc[['AA', 'DL'], ["Dest", "Tail_Number"]]
)
```

:::

### Rows by number, columns by number

The Polars docs recommend doing this the evil way with square brackets, so make of that what you will.
Selecting columns by number isn't a very common operation anyway.

::: {.panel-tabset}
## Polars

``` {python}
df_pl[[0, 1, 3], [0, 1]]
```

## Pandas

``` {python}
df_pd.iloc[[0, 1, 3], [0, 1]]
```

:::

## SettingWithCopy

Pandas has this cute thing where if you assign values to some subset of the dataframe with square bracket indexing, it doesn't work and gives the notorious `SettingWithCopyWarning`. To be fair, this warning also tells you to assign using `.loc`. Unfortunately many people in the Pandas community can't read and instead just ignore the warning.

Polars is not yet popular enough to attact the same crowd, but when it does it should not run into the same problem, as the only way to add or overwrite columns in Polars is the `with_columns` method.


::: {.panel-tabset}
## Polars

``` {python}
f = pl.DataFrame({'a': [1,2,3,4,5], 'b': [10,20,30,40,50]})
f.with_columns(
    pl.when(pl.col("a") <= 3)
    .then(pl.col("b") // 10)
    .otherwise(pl.col("b"))
)
```

## Pandas (bad)

``` {python}
f = pd.DataFrame({'a': [1,2,3,4,5], 'b': [10,20,30,40,50]})
f[f['a'] <= 3]['b'] = f['b'] // 10
f
```

## Pandas (good)

``` {python}
f = pd.DataFrame({'a': [1,2,3,4,5], 'b': [10,20,30,40,50]})
f.loc[f['a'] <= 3, "b"] = f['b'] // 10
f
```

## Pandas (better)

``` {python}
f = pd.DataFrame({'a': [1,2,3,4,5], 'b': [10,20,30,40,50]})
f.assign(b=f["b"].mask(f["a"] <=3, f["b"] // 10))
```

:::


## Summary

Basically, there's no index in Polars and square brackets are bad most of the time.
I think the lack of an index is quite acceptable even if there are
cases where it's useful. Most Pandas users just call `.reset_index()`
all the time anyway.
